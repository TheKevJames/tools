{
  "automerge": false,
  "branchPrefix": "renovate/",
  "extends": [
    "group:monorepos",
    "group:recommended",
    "npm:unpublishSafe"
  ],
  "ignoreUnstable": true,
  "lockFileMaintenance": {
    "enabled": true,
    "automerge": true
  },
  "packageRules": [
    {
      "matchDatasources": ["docker"],
      "matchDepPatterns": ["^python$"],
      "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(?<prerelease>[^.-]+)?(-(?<compatibility>.*))?$"
    },
    {
      "matchDatasources": ["docker"],
      "matchDepPatterns": [
        "^lscr.io/linuxserver/jellyfin$",
        "^lscr.io/linuxserver/prowlarr$"
      ],
      "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d{,3})$"
    },
    {
      "matchDatasources": ["github-tags"],
      "matchDepPatterns": ["^AleksaC/hadolint-py$", "^shellcheck-py/shellcheck-py$"],
      "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(\\.(?<build>\\d+))?$"
    },
    {
      "matchManagers": ["poetry"],
      "versioning": "poetry"
    },
    {
      "matchDatasources": ["orb"],
      "rangeStrategy": "replace",
      "patch": {
        "enabled": false
      }
    },
    {
      "matchManagers": ["poetry"],
      "matchDepPatterns": ["^python$"],
      "rangeStrategy": "widen"
    },
    {
      "matchManagers": ["poetry"],
      "matchDepTypes": ["dev"],
      "rangeStrategy": "pin"
    },
    {
      "matchDepTypes": ["build-system.requires"],
      "rangeStrategy": "widen"
    },
    {
      "groupName": "elasticsearch",
      "matchDepPatterns": ["^elasticsearch", "^org.elasticsearch.client"]
    },
    {
      "groupName": "com.google.auto.value",
      "matchManagers": ["gradle", "maven"],
      "matchDepPatterns": ["^com.google.auto.value.*$"]
    },
    {
      "groupName": "org.apache.beam",
      "matchManagers": ["gradle", "maven"],
      "matchDepPatterns": ["^org.apache.beam.*$", "^apache-beam$", "^beam_python..._sdk$"]
    },
    {
      "groupName": "org.apache.hadoop",
      "matchManagers": ["gradle", "maven"],
      "matchDepPatterns": ["^org.apache.hadoop.*$"]
    },
    {
      "groupName": "org.jetbrains.kotlin",
      "matchManagers": ["gradle", "maven"],
      "matchDepPatterns": ["^org.jetbrains.kotlin.*$"]
    },
    {
      "groupName": "google",
      "matchDatasources": ["terraform"],
      "matchDepPatterns": ["^google"]
    },
    {
      "groupName": "google",
      "matchManagers": ["terraform"],
      "matchDepPatterns": ["^google"]
    },
    {
      "groupName": "gcsfs",
      "matchDatasources": ["pypi"],
      "matchDepPatterns": ["^fsspec$", "^gcsfs$"]
    },
    {
      "groupName": "grpcio",
      "matchDatasources": ["pypi"],
      "matchDepPatterns": ["^grpcio"]
    },
    {
      "groupName": "mkl",
      "matchDatasources": ["pypi"],
      "matchDepPatterns": ["^mkl$", "^intel-openmp$"]
    },
    {
      "groupName": "opentelemetry-instrumentation monorepo",
      "matchDatasources": ["pypi"],
      "matchDepPatterns": ["^opentelemetry-distro$", "^opentelemetry-instrumentation-"]
    },
    {
      "groupName": "pydantic",
      "matchDatasources": ["pypi"],
      "matchDepPatterns": ["^pydantic$", "^pydantic-core$"]
    },
    {
      "groupName": "python",
      "matchDepPatterns": ["^cimg/python$", "^python$", "^python/cpython$"]
    },
    {
      "groupName": "pytorch",
      "matchDatasources": ["pypi"],
      "matchDepPatterns": ["^torch$", "^torchaudio$"]
    },
    {
      "groupName": "sanic",
      "matchDatasources": ["pypi"],
      "matchDepPatterns": ["^sanic$", "^sanic-testing$"]
    },
    {
      "groupName": "terraform",
      "matchDepPatterns": ["^terraform$"]
    }
  ],
  "customManagers": [
    {
      "description": "Update _VERSION variables in Dockerfiles",
      "fileMatch": [
        "(^|/|\\.)Dockerfile$",
        "(^|/)Dockerfile\\.[^/]*$"
      ],
      "customType": "regex",
      "matchStrings": [
        "# renovate: datasource=(?<datasource>[a-z-]+?) depName=(?<depName>.+?)(?: versioning=(?<versioning>[a-z-]+?))?\\s(?:ENV|ARG) .+?_VERSION=(?<currentValue>.+?)\\s"
      ],
      "versioningTemplate": "{{#if versioning}}{{versioning}}{{else}}semver{{/if}}"
    },
    {
      "description": "Update default_language_version.python in .pre-commit-config.yaml",
      "datasourceTemplate": "github-tags",
      "depNameTemplate": "python/cpython",
      "extractVersionTemplate": "^v(?<version>\\d+\\.\\d+)(\\.\\d+)?$",
      "fileMatch": [
        "(^|/)\\.pre-commit-config\\.yaml$"
      ],
      "customType": "regex",
      "matchStrings": [
        "default_language_version:\\s+python: python(?<currentValue>.+?)\\s"
      ],
      "versioningTemplate": "semver-coerced"
    },
    {
      "description": "Update python dependencies in .pre-commit-config.yaml additional_dependencies",
      "fileMatch": [
        "^.pre-commit-config.yaml$"
      ],
      "customType": "regex",
      "matchStrings": [
        "# renovate: datasource=(?<datasource>pypi) depName=(?<depName>.+?)(?: versioning=(?<versioning>[a-z-]+?))?\\s+- .+==(?<currentValue>.+?)\\s"
      ],
      "versioningTemplate": "{{#if versioning}}{{versioning}}{{else}}semver{{/if}}"
    },
    {
      "description": "Update docker images in terraform files",
      "fileMatch": [
        "(^|/)*\\.tf$"
      ],
      "customType": "regex",
      "matchStrings": [
        "\\s*image\\s*=\\s*\"(?<depName>.*?):(?<currentValue>.*?)\"\\s*#\\s*renovate\\n"
      ],
      "datasourceTemplate": "docker"
    }
  ],
  "pre-commit": {
    "enabled": true
  },
  "prConcurrentLimit": 0,
  "prCreation": "immediate",
  "prHourlyLimit": 0,
  "pruneStaleBranches": true,
  "rangeStrategy": "pin",
  "rollbackPrs": true,
  "semanticCommits": "enabled",
  "semanticCommitType": "chore",
  "separateMajorMinor": true,
  "separateMinorPatch": true,
  "separateMultipleMajor": true,
  "unpublishSafe": true,
  "updateNotScheduled": true
}
